@top Program { unit }
@skip { space | comment }
@external tokens untilEOLToken from "./tokens" { untilEOL }
@precedence { unary }

unit { globalDeclaration* }

k<term> { @specialize[@name='Keyword']<Identifier, term> }
t<term> { @specialize[@name='Type']<Identifier, term> }

comment { commentLine untilEOL }
template<content> { '<' content '>' }

globalDeclaration {
  semicolon |
  LocalDeclaration
}

LocalDeclaration {
  GlobalConstantDeclaration semicolon
}

GlobalConstantDeclaration {
  AttributeList k<'const'> VariableIdentifier Assign |
  AttributeList k<'override'> VariableIdentifier (Assign)?
}

VariableIdentifier { Identifier | Identifier colon TypeDeclaration }

AttributeList { Attribute* }

Attribute {
  at Identifier (
    '(' (literalOrIdentifier comma)* literalOrIdentifier ')'
  )?
}

literalOrIdentifier {
  IntLiteral |
  UintLiteral |
  FloatLiteral |
  Identifier
}

elementCountExpression {
  IntLiteral |
  UintLiteral |
  Identifier
}

addressSpace {
  k<'function'> |
  k<'private'> |
  k<'workgroup'> |
  k<'uniform'> |
  k<'storage'>
}

accessMode {
  k<'read'> |
  k<'write'> |
  k<'read_write'>
}

TypeDeclaration {
  Identifier ~conflict |
  t<'array'> |
  t<'bool'> |
  t<'f16'> |
  t<'f32'> |
  t<'i32'> |
  t<'u32'> |
  t<'vec2'> template<TypeDeclaration>? |
  t<'vec3'> template<TypeDeclaration>? |
  t<'vec4'> template<TypeDeclaration>? |
  t<'vec2i'> |
  t<'vec3i'> |
  t<'vec4i'> |
  t<'vec2u'> |
  t<'vec3u'> |
  t<'vec4u'> |
  t<'vec2f'> |
  t<'vec3f'> |
  t<'vec4f'> |
  t<'vec2h'> |
  t<'vec3h'> |
  t<'vec4h'> |
  t<'ptr'> template<addressSpace comma TypeDeclaration (comma accessMode)?> |
  arrayTypeDeclaration |
  t<'mat2x2'> template<TypeDeclaration>? |
  t<'mat2x3'> template<TypeDeclaration>? |
  t<'mat2x4'> template<TypeDeclaration>? |
  t<'mat3x2'> template<TypeDeclaration>? |
  t<'mat3x3'> template<TypeDeclaration>? |
  t<'mat3x4'> template<TypeDeclaration>? |
  t<'mat4x2'> template<TypeDeclaration>? |
  t<'mat4x3'> template<TypeDeclaration>? |
  t<'mat4x4'> template<TypeDeclaration>? |
  t<'atomic'> template<TypeDeclaration> |
  textureSamplerTypes
}

arrayTypeDeclaration { t<'array'> '<' TypeDeclaration (comma elementCountExpression)? '>' }

textureSamplerTypes {
  samplerType |
  depthTextureType |
  sampledTextureType template<TypeDeclaration> |
  multisampledTextureType template<TypeDeclaration> |
  storageTextureType template<texelFormat comma accessMode>
}

samplerType {
  t<'sampler'> |
  t<'sampler_comparison'>
}

sampledTextureType {
  t<'texture_1d'> |
  t<'texture_2d'> |
  t<'texture_2d_array'> |
  t<'texture_3d'> |
  t<'texture_cube'> |
  t<'texture_cube_array'>
}

multisampledTextureType { k<'texture_multisampled_2d'> }
storageTextureType {
  t<'texture_storage_1d'> |
  t<'texture_storage_2d'> |
  t<'texture_storage_2d_array'> |
  t<'texture_storage_3d'>
}

depthTextureType {
  k<'texture_depth_2d'> |
  k<'texture_depth_2d_array'> |
  k<'texture_depth_cube'> |
  k<'texture_depth_cube_array'> |
  k<'texture_depth_multisampled_2d'>
}

texelFormat {
  t<'rgba8unorm'> |
  t<'rgba8snorm'> |
  t<'rgba8uint'> |
  t<'rgba8sint'> |
  t<'rgba16uint'> |
  t<'rgba16sint'> |
  t<'rgba16float'> |
  t<'r32uint'> |
  t<'r32sint'> |
  t<'r32float'> |
  t<'rg32uint'> |
  t<'rg32sint'> |
  t<'rg32float'> |
  t<'rgba32uint'> |
  t<'rgba32sint'> |
  t<'rgba32float'>
}

@tokens {
  space { std.whitespace+ }
  commentLine { "//" }

  Identifier { $[a-zA-Z_] $[0-9a-zA-Z_]* }

  IntLiteral { ("0" $[xX] $[0-9a-fA-F]+ | "0" | $[1-9] $[0-9]*) }
  UintLiteral { "0" $[xX] $[0-9a-fA-F]+ "u" | "0u" | $[1-9] $[0-9]* "u" }
  FloatLiteral { 
    (
      ($[0-9]* "." $[0-9]+ | "-"? $[0-9]+ "." $[0-9]*)
      ($[eE] $[+\-]? $[0-9]+)?
      "f"?
    ) |
    (
      $[0-9]+
      $[eE] $[+\-]? $[0-9]+
      "f"?
    ) |
    (
      "0" $[xX]
      (
        (
          (
            $[0-9a-fA-F]* "." $[0-9a-fA-F]+ |
            $[0-9a-fA-F]+ "." $[0-9a-fA-F]*
          )
          (
            $[pP] $[+\-]? $[0-9]+ "f"?
          )?
        ) |
        (
          $[0-9a-fA-F]+ $[pP] $[+\-]? $[0-9]+ "f"?
        )
      )
    )
  }
 
  comma { "," }
  colon { ":" }
  semicolon { ";" }
  at { "@" }

  Assign { "=" }

  @precedence {
    commentLine, FloatLiteral, UintLiteral, IntLiteral, Identifier
  }
}
